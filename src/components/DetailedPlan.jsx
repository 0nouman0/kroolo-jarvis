import { useState } from 'react';

function DetailedPlan({ analysis, onClose }) {
  // Create prioritized task list based on severity with safety checks
  const prioritizedTasks = (analysis && analysis.gaps && Array.isArray(analysis.gaps) ? [...analysis.gaps] : [])
    .map(gap => ({
      // Map the gap data to the expected format
      title: gap.issue || gap.title || 'Compliance Gap',
      description: gap.remediation || gap.description || 'No description provided',
      severity: (gap.severity || 'medium').toLowerCase(),
      framework: gap.framework || 'General',
      businessImpact: gap.businessImpact || 'Moderate impact',
      timeframe: gap.timeframe || '3-6 months',
      effort: gap.effort || 'Medium',
      recommendation: gap.remediation || gap.recommendation || 'Contact compliance team for guidance',
      currentScore: gap.currentScore || 0,
      targetScore: gap.targetScore || 100
    }))
    .sort((a, b) => {
      const severityOrder = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };
      return (severityOrder[b.severity] || 0) - (severityOrder[a.severity] || 0);
    });

  const [selectedFramework, setSelectedFramework] = useState('all');

  const getUniqueFrameworks = () => {
    if (!prioritizedTasks) return [];
    const frameworks = prioritizedTasks.map(task => task.framework).filter(Boolean);
    return [...new Set(frameworks)];
  };

  const getFilteredTasks = () => {
    if (selectedFramework === 'all') {
      return prioritizedTasks;
    }
    return prioritizedTasks.filter(task => task.framework === selectedFramework);
  };

  console.log('DetailedPlan received analysis:', {
    hasAnalysis: !!analysis,
    hasGaps: !!(analysis && analysis.gaps),
    gapsLength: analysis?.gaps?.length || 0,
    gapsStructure: analysis?.gaps?.slice(0, 2) || [],
    mappedTasksLength: prioritizedTasks.length,
    severityCounts: {
      critical: prioritizedTasks.filter(t => t.severity === 'critical').length,
      high: prioritizedTasks.filter(t => t.severity === 'high').length,
      medium: prioritizedTasks.filter(t => t.severity === 'medium').length,
      low: prioritizedTasks.filter(t => t.severity === 'low').length
    }
  });

  const getTimelineByPriority = (severity) => {
    const s = severity?.toLowerCase() || 'low';
    if (s === 'critical') return { time: 'IMMEDIATE (0-7 days)', icon: '🚨', color: 'text-red-600' };
    if (s === 'high') return { time: 'URGENT (7-30 days)', icon: '⚠️', color: 'text-orange-600' };
    if (s === 'medium') return { time: 'MODERATE (30-90 days)', icon: '📋', color: 'text-yellow-600' };
    return { time: 'STANDARD (90-180 days)', icon: '✅', color: 'text-green-600' };
  };

  const getBusinessImpact = (severity) => {
    const s = severity?.toLowerCase() || 'low';
    if (s === 'critical') return 'SEVERE - Potential regulatory penalties, legal liability';
    if (s === 'high') return 'HIGH - Compliance violations, reputation risk';
    if (s === 'medium') return 'MODERATE - Process improvements needed';
    return 'LOW - Best practice enhancement';
  };

  const downloadPlan = () => {
    const planContent = `
DETAILED REMEDIATION PLAN
Generated on: ${new Date().toLocaleDateString()}

EXECUTIVE SUMMARY
Total Gaps Identified: ${prioritizedTasks.length}
Critical Items: ${prioritizedTasks.filter(task => task.severity === 'critical').length}
High Priority Items: ${prioritizedTasks.filter(task => task.severity === 'high').length}
Medium Priority Items: ${prioritizedTasks.filter(task => task.severity === 'medium').length}
Low Priority Items: ${prioritizedTasks.filter(task => task.severity === 'low').length}

PRIORITIZED ACTION ITEMS:

${prioritizedTasks.map((task, index) => `
${index + 1}. ${task.title || 'Untitled Task'}
   Priority: ${task.severity?.toUpperCase() || 'MEDIUM'}
   Framework: ${task.framework || 'General'}
   Timeline: ${getTimelineByPriority(task.severity).time}
   Description: ${task.description || 'No description provided'}
   Recommendation: ${task.recommendation || 'Contact compliance team for guidance'}
   Business Impact: ${getBusinessImpact(task.severity)}
   Current Score: ${task.currentScore || 0}%
   Target Score: ${task.targetScore || 100}%
`).join('\n')}

IMPLEMENTATION GUIDELINES:
1. Address Critical and High priority items first
2. Assign dedicated resources for each task
3. Set up regular review checkpoints
4. Document all remediation activities
5. Validate completion with compliance team

Generated by Poligap - Policy Gap Analysis Tool
    `;

    const blob = new Blob([planContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `remediation-plan-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-osmo shadow-osmo w-full max-w-6xl max-h-screen overflow-y-auto">
        
        {/* Header */}
        <div className="sticky top-0 bg-gradient-to-r from-osmo-purple to-osmo-blue p-6 rounded-t-osmo">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-white rounded-lg flex items-center justify-center">
                <span className="text-2xl">📋</span>
              </div>
              <div>
                <h2 className="text-2xl font-bold text-white">Detailed Implementation Plan</h2>
                <p className="text-white opacity-90">Prioritized roadmap for compliance remediation</p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={downloadPlan}
                className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg font-semibold transition-colors duration-200 flex items-center"
              >
                <span className="mr-2">💾</span>
                Download Plan
              </button>
              <button
                onClick={onClose}
                className="w-10 h-10 bg-white bg-opacity-20 rounded-lg flex items-center justify-center text-white hover:bg-opacity-30 transition-all"
              >
                <span className="text-xl">×</span>
              </button>
            </div>
          </div>
        </div>

        <div className="p-6 space-y-6">
          
          {/* Summary Cards */}
          <div className="grid md:grid-cols-5 gap-4">
            <div className="bg-red-50 border border-red-200 rounded-osmo p-4 text-center">
              <div className="text-2xl font-bold text-red-600">
                {prioritizedTasks.filter(task => task.severity === 'critical').length}
              </div>
              <div className="text-sm text-gray-600">Critical</div>
            </div>
            <div className="bg-orange-50 border border-orange-200 rounded-osmo p-4 text-center">
              <div className="text-2xl font-bold text-orange-600">
                {prioritizedTasks.filter(task => task.severity === 'high').length}
              </div>
              <div className="text-sm text-gray-600">High Priority</div>
            </div>
            <div className="bg-yellow-50 border border-yellow-200 rounded-osmo p-4 text-center">
              <div className="text-2xl font-bold text-yellow-600">
                {prioritizedTasks.filter(task => task.severity === 'medium').length}
              </div>
              <div className="text-sm text-gray-600">Medium Priority</div>
            </div>
            <div className="bg-green-50 border border-green-200 rounded-osmo p-4 text-center">
              <div className="text-2xl font-bold text-green-600">
                {prioritizedTasks.filter(task => task.severity === 'low').length}
              </div>
              <div className="text-sm text-gray-600">Low Priority</div>
            </div>
            <div className="bg-blue-50 border border-blue-200 rounded-osmo p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">
                {getUniqueFrameworks().length}
              </div>
              <div className="text-sm text-gray-600 mb-2">Frameworks</div>
              <div className="flex flex-wrap justify-center gap-1">
                {getUniqueFrameworks().slice(0, 4).map((framework, index) => {
                  const frameworkInfo = {
                    'GDPR': { icon: '🇪🇺' },
                    'HIPAA': { icon: '🏥' },
                    'SOX': { icon: '💼' },
                    'CCPA': { icon: '🏛️' },
                    'PCI_DSS': { icon: '💳' },
                    'PCI DSS': { icon: '💳' },
                    'ISO_27001': { icon: '🔒' },
                    'ISO 27001': { icon: '🔒' },
                    'FERPA': { icon: '🎓' },
                    'GLBA': { icon: '🏦' },
                    'COPPA': { icon: '👶' },
                    'NIST_CSF': { icon: '🛡️' },
                    'NIST CSF': { icon: '🛡️' },
                    'CAN_SPAM': { icon: '📧' },
                    'FISMA': { icon: '🏛️' }
                  };
                  const info = frameworkInfo[framework] || { icon: '📋' };
                  return (
                    <span key={index} className="text-xs" title={framework}>
                      {info.icon}
                    </span>
                  );
                })}
                {getUniqueFrameworks().length > 4 && (
                  <span className="text-xs text-gray-500">
                    +{getUniqueFrameworks().length - 4}
                  </span>
                )}
              </div>
            </div>
          </div>

          {/* Implementation Timeline */}
          <div className="bg-osmo-blue bg-opacity-10 rounded-osmo p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">📅 Recommended Implementation Timeline</h3>
            <div className="space-y-3">
              <div className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-red-500 rounded-full"></div>
                <div className="flex-1">
                  <span className="font-semibold">Phase 1 (0-30 days):</span> Address all Critical and High priority items
                </div>
                <div className="text-sm text-gray-600">
                  {prioritizedTasks.filter(t => ['critical', 'high'].includes(t.severity)).length} items
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-yellow-500 rounded-full"></div>
                <div className="flex-1">
                  <span className="font-semibold">Phase 2 (30-90 days):</span> Implement Medium priority improvements
                </div>
                <div className="text-sm text-gray-600">
                  {prioritizedTasks.filter(t => t.severity === 'medium').length} items
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <div className="w-4 h-4 bg-green-500 rounded-full"></div>
                <div className="flex-1">
                  <span className="font-semibold">Phase 3 (90+ days):</span> Complete Low priority enhancements
                </div>
                <div className="text-sm text-gray-600">
                  {prioritizedTasks.filter(t => t.severity === 'low').length} items
                </div>
              </div>
            </div>
          </div>

          {/* Framework Filter */}
          {getUniqueFrameworks().length > 1 && (
            <div className="bg-white rounded-osmo p-4 border border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 mb-3">🔍 Filter by Framework</h3>
              <div className="flex flex-wrap gap-2">
                <button
                  onClick={() => setSelectedFramework('all')}
                  className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                    selectedFramework === 'all'
                      ? 'bg-osmo-blue text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  All Frameworks ({prioritizedTasks.length})
                </button>
                {getUniqueFrameworks().map((framework) => {
                  const taskCount = prioritizedTasks.filter(task => task.framework === framework).length;
                  const frameworkInfo = {
                    'GDPR': { icon: '🇪🇺', color: 'blue', name: 'GDPR' },
                    'HIPAA': { icon: '🏥', color: 'green', name: 'HIPAA' },
                    'SOX': { icon: '💼', color: 'purple', name: 'SOX' },
                    'CCPA': { icon: '🏛️', color: 'orange', name: 'CCPA' },
                    'PCI_DSS': { icon: '💳', color: 'red', name: 'PCI DSS' },
                    'PCI DSS': { icon: '💳', color: 'red', name: 'PCI DSS' },
                    'ISO_27001': { icon: '🔒', color: 'indigo', name: 'ISO 27001' },
                    'ISO 27001': { icon: '🔒', color: 'indigo', name: 'ISO 27001' },
                    'FERPA': { icon: '🎓', color: 'teal', name: 'FERPA' },
                    'GLBA': { icon: '🏦', color: 'cyan', name: 'GLBA' },
                    'COPPA': { icon: '👶', color: 'pink', name: 'COPPA' },
                    'NIST_CSF': { icon: '🛡️', color: 'gray', name: 'NIST CSF' },
                    'NIST CSF': { icon: '🛡️', color: 'gray', name: 'NIST CSF' },
                    'CAN_SPAM': { icon: '📧', color: 'yellow', name: 'CAN-SPAM' },
                    'FISMA': { icon: '🏛️', color: 'emerald', name: 'FISMA' }
                  };
                  const info = frameworkInfo[framework] || { icon: '📋', color: 'gray', name: framework };
                  
                  return (
                    <button
                      key={framework}
                      onClick={() => setSelectedFramework(framework)}
                      className={`px-3 py-1 rounded-full text-sm font-medium transition-colors inline-flex items-center ${
                        selectedFramework === framework
                          ? `bg-${info.color}-600 text-white`
                          : `bg-${info.color}-100 text-${info.color}-800 hover:bg-${info.color}-200`
                      }`}
                    >
                      <span className="mr-1">{info.icon}</span>
                      {info.name} ({taskCount})
                    </button>
                  );
                })}
              </div>
            </div>
          )}

          {/* Detailed Tasks */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">🎯 Detailed Action Items</h3>
              {selectedFramework !== 'all' && (
                <div className="text-sm text-gray-600">
                  Showing {getFilteredTasks().length} of {prioritizedTasks.length} tasks
                </div>
              )}
            </div>
            
            {getFilteredTasks().length === 0 ? (
              <div className="text-center py-8 bg-gray-50 rounded-osmo">
                <div className="text-gray-500">
                  {selectedFramework === 'all' 
                    ? 'No gaps identified or analysis data not available'
                    : `No tasks found for ${selectedFramework} framework`
                  }
                </div>
              </div>
            ) : (
              getFilteredTasks().map((task, index) => {
                const timeline = getTimelineByPriority(task.severity);
                const severityColors = {
                  critical: 'border-red-200 bg-red-50',
                  high: 'border-orange-200 bg-orange-50',
                  medium: 'border-yellow-200 bg-yellow-50',
                  low: 'border-green-200 bg-green-50'
                };
                
                const severityBadges = {
                  critical: 'bg-red-500 text-white',
                  high: 'bg-orange-500 text-white',
                  medium: 'bg-yellow-500 text-white',
                  low: 'bg-green-500 text-white'
                };

                return (
                  <div
                    key={index}
                    className={`border rounded-osmo p-6 ${severityColors[task.severity] || severityColors.low}`}
                  >
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <div className="text-2xl">{timeline.icon}</div>
                        <div>
                          <h4 className="text-lg font-semibold text-gray-900">
                            {index + 1}. {task.title || 'Untitled Task'}
                          </h4>
                          <p className="text-gray-600 mt-1">{task.description || 'No description provided'}</p>
                        </div>
                      </div>
                      <div className="flex flex-col items-end space-y-2">
                        <span className={`px-3 py-1 rounded-full text-sm font-semibold ${
                          severityBadges[task.severity] || severityBadges.low
                        }`}>
                          {task.severity?.charAt(0).toUpperCase() + task.severity?.slice(1) || 'Low'} Priority
                        </span>
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-4 mb-4">
                      <div className="space-y-2">
                        <div className="text-sm font-semibold text-gray-700">📅 Timeline</div>
                        <div className={`text-sm ${timeline.color}`}>{timeline.time}</div>
                      </div>
                      <div className="space-y-2">
                        <div className="text-sm font-semibold text-gray-700">💼 Business Impact</div>
                        <div className="text-sm text-gray-600">{task.businessImpact}</div>
                      </div>
                      <div className="space-y-2">
                        <div className="text-sm font-semibold text-gray-700">📊 Current Score</div>
                        <div className="text-sm text-gray-600">{task.currentScore}%</div>
                      </div>
                      <div className="space-y-2">
                        <div className="text-sm font-semibold text-gray-700">🎯 Target Score</div>
                        <div className="text-sm text-gray-600">{task.targetScore}%</div>
                      </div>
                    </div>

                    {task.recommendation && (
                      <div className="bg-white bg-opacity-70 rounded-lg p-4 mb-4">
                        <div className="text-sm font-semibold text-osmo-purple mb-2">💡 Recommended Action</div>
                        <div className="text-sm text-gray-700">{task.recommendation}</div>
                      </div>
                    )}

                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4 text-sm">
                        {(() => {
                          const frameworkName = task.framework;
                          const frameworkInfo = {
                            'GDPR': { icon: '🇪🇺', color: 'blue', name: 'GDPR' },
                            'HIPAA': { icon: '🏥', color: 'green', name: 'HIPAA' },
                            'SOX': { icon: '💼', color: 'purple', name: 'SOX' },
                            'CCPA': { icon: '🏛️', color: 'orange', name: 'CCPA' },
                            'PCI_DSS': { icon: '💳', color: 'red', name: 'PCI DSS' },
                            'PCI DSS': { icon: '💳', color: 'red', name: 'PCI DSS' },
                            'ISO_27001': { icon: '🔒', color: 'indigo', name: 'ISO 27001' },
                            'ISO 27001': { icon: '🔒', color: 'indigo', name: 'ISO 27001' },
                            'FERPA': { icon: '🎓', color: 'teal', name: 'FERPA' },
                            'GLBA': { icon: '🏦', color: 'cyan', name: 'GLBA' },
                            'COPPA': { icon: '👶', color: 'pink', name: 'COPPA' },
                            'NIST_CSF': { icon: '🛡️', color: 'gray', name: 'NIST CSF' },
                            'NIST CSF': { icon: '🛡️', color: 'gray', name: 'NIST CSF' },
                            'CAN_SPAM': { icon: '📧', color: 'yellow', name: 'CAN-SPAM' },
                            'FISMA': { icon: '🏛️', color: 'emerald', name: 'FISMA' }
                          };
                          
                          const framework = frameworkInfo[frameworkName] || frameworkInfo[frameworkName?.toUpperCase()] || { 
                            icon: '📋', 
                            color: 'gray', 
                            name: frameworkName || 'General'
                          };
                          
                          return (
                            <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold bg-${framework.color}-100 text-${framework.color}-800 border border-${framework.color}-200`}>
                              <span className="mr-1">{framework.icon}</span>
                              {framework.name}
                            </span>
                          );
                        })()}
                        <span className="text-gray-600">
                          Effort: <span className="font-semibold text-gray-800">{task.effort}</span>
                        </span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button className="text-osmo-blue hover:text-osmo-purple text-sm font-semibold transition-colors">
                          View Details
                        </button>
                        <button className="bg-osmo-blue hover:bg-blue-600 text-white px-3 py-1 rounded text-sm font-semibold transition-colors">
                          Assign Task
                        </button>
                      </div>
                    </div>
                  </div>
                );
              })
            )}
          </div>

          {/* Implementation Guidelines */}
          <div className="bg-white border rounded-osmo p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">📚 Implementation Guidelines</h3>
            <div className="space-y-3">
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-osmo-purple text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">1</div>
                <div>
                  <div className="font-semibold text-gray-900">Prioritize by Risk</div>
                  <div className="text-gray-600 text-sm">Focus on Critical and High priority items first to minimize compliance risk</div>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-osmo-blue text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">2</div>
                <div>
                  <div className="font-semibold text-gray-900">Assign Resources</div>
                  <div className="text-gray-600 text-sm">Dedicate specific team members to each task with clear accountability</div>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-osmo-green text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">3</div>
                <div>
                  <div className="font-semibold text-gray-900">Track Progress</div>
                  <div className="text-gray-600 text-sm">Set up regular checkpoints to monitor implementation progress</div>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-osmo-purple text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">4</div>
                <div>
                  <div className="font-semibold text-gray-900">Document Everything</div>
                  <div className="text-gray-600 text-sm">Maintain detailed records of all remediation activities for audit purposes</div>
                </div>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-6 h-6 bg-osmo-blue text-white rounded-full flex items-center justify-center text-sm font-bold mt-0.5">5</div>
                <div>
                  <div className="font-semibold text-gray-900">Validate Completion</div>
                  <div className="text-gray-600 text-sm">Have compliance team review and sign off on completed tasks</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default DetailedPlan;
